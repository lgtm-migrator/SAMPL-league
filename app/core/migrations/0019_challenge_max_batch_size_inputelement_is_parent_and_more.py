# Generated by Django 4.0.4 on 2022-06-15 20:42

import core.models.batch_related
import core.models.run_related
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('core', '0018_container_container_type'),
    ]

    operations = [
        migrations.AddField(
            model_name='challenge',
            name='max_batch_size',
            field=models.PositiveIntegerField(default=0, help_text='0 to disable batching'),
        ),
        migrations.AddField(
            model_name='inputelement',
            name='is_parent',
            field=models.BooleanField(default=False, help_text="Parent elements won't be evaluated. They are used to group common values"),
        ),
        migrations.AddField(
            model_name='inputelement',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='Inherit common values from parent element, eg. protein PDB file', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.inputelement'),
        ),
        migrations.AddField(
            model_name='prediction',
            name='input_element',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='core.inputelement'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='valuetype',
            name='batch_method',
            field=models.CharField(blank=True, choices=[('', 'None'), ('csv', 'CSV'), ('mol', 'MOL or SDF')], default='csv', max_length=10),
        ),
        migrations.AddField(
            model_name='valuetype',
            name='on_parent_flag',
            field=models.BooleanField(choices=[(True, 'On parent'), (False, 'On child')], default=False, help_text='For input elements, should this value be set on the parent or on the child? e.g. protein PDB structure should only be set on the parent; ligand SMILES should only be set on the child'),
        ),
        migrations.AlterField(
            model_name='evaluation',
            name='status',
            field=models.CharField(choices=[('FAILURE', 'Failure'), ('SUCCESS', 'Success'), ('PENDING', 'Pending'), ('PENDING_REMOTE', 'Pending Remote'), ('RUNNING', 'Running'), ('CANCELLED', 'Cancelled'), ('CANCEL_PENDING', 'Cancel Pending')], default='PENDING', max_length=25),
        ),
        migrations.AlterField(
            model_name='submissionrun',
            name='status',
            field=models.CharField(choices=[('FAILURE', 'Failure'), ('SUCCESS', 'Success'), ('PENDING', 'Pending'), ('PENDING_REMOTE', 'Pending Remote'), ('RUNNING', 'Running'), ('CANCELLED', 'Cancelled'), ('CANCEL_PENDING', 'Cancel Pending')], max_length=25),
        ),
        migrations.CreateModel(
            name='InputBatchGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('max_batch_size', models.PositiveIntegerField(help_text='Value of setting when batch group was created')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.challenge')),
            ],
            options={
                'get_latest_by': ('created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InputBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=False)),
                ('batch_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.inputbatchgroup')),
            ],
            options={
                'get_latest_by': ('created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BatchFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data', models.FileField(upload_to=core.models.batch_related.batch_upload_location)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.inputbatch')),
                ('value_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.valuetype')),
            ],
            options={
                'get_latest_by': ('created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BatchEvaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('log_stdout', models.TextField(blank=True)),
                ('log_stderr', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('FAILURE', 'Failure'), ('SUCCESS', 'Success'), ('PENDING', 'Pending'), ('PENDING_REMOTE', 'Pending Remote'), ('RUNNING', 'Running'), ('CANCELLED', 'Cancelled'), ('CANCEL_PENDING', 'Cancel Pending')], default='PENDING', max_length=25)),
                ('input_batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.inputbatch')),
                ('submission_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.submissionrun')),
            ],
            options={
                'unique_together': {('submission_run', 'input_batch')},
            },
            bases=(models.Model, core.models.run_related.StatusMixin),
        ),
        migrations.AddField(
            model_name='filevalue',
            name='batch_evaluation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.batchevaluation'),
        ),
        migrations.AddField(
            model_name='floatvalue',
            name='batch_evaluation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.batchevaluation'),
        ),
        migrations.AddField(
            model_name='textvalue',
            name='batch_evaluation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.batchevaluation'),
        ),
        migrations.CreateModel(
            name='InputBatchMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.inputbatch')),
                ('batch_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.inputbatchgroup')),
                ('input_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.inputelement')),
            ],
            options={
                'unique_together': {('batch_group', 'input_element')},
            },
        ),
        migrations.CreateModel(
            name='BatchPrediction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField(help_text='The ID of the object in the table for that type of value (Float Value, Text Value, File Value)')),
                ('batch_evaluation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.batchevaluation')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.challenge')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('input_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.inputelement')),
                ('value_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.valuetype')),
            ],
            options={
                'unique_together': {('batch_evaluation', 'input_element', 'value_type')},
            },
        ),
    ]

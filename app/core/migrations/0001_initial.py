# Generated by Django 3.2 on 2021-05-25 21:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlobValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.BinaryField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('start_at', models.DateTimeField()),
                ('end_at', models.DateTimeField()),
                ('repo_url', models.URLField()),
                ('sample_data_url', models.URLField()),
                ('sample_score_reference_url', models.URLField()),
                ('secret_data_url', models.URLField()),
                ('secret_score_reference_url', models.URLField()),
                ('execution_options_json', models.JSONField()),
            ],
            options={
                'get_latest_by': ('created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('registry', models.CharField(max_length=255)),
                ('label', models.CharField(max_length=255)),
                ('tag', models.CharField(blank=True, max_length=255, null=True)),
                ('digest', models.CharField(blank=True, max_length=255, null=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': ('created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FloatValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InputElement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('is_public', models.BooleanField(default=False)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.challenge')),
            ],
            options={
                'unique_together': {('challenge', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('draft_mode', models.BooleanField(default=False, help_text='In draft mode, submissions may be incomplete.')),
                ('name', models.CharField(help_text='Please provide an informal but informative name of the method used.\nThe name must not exceed 40 characters.', max_length=40)),
                ('url', models.URLField(blank=True, null=True)),
                ('compute_time', models.TextField(blank=True, help_text='Please provide the average compute time across all of the molecules.\nFor physical methods, report the GPU and/or CPU compute time in hours.\nFor empirical methods, report the query time in hours.\nCreate a new line for each processor type.', null=True)),
                ('computing_and_hardware', models.TextField(blank=True, help_text='Please provide details of the computing resources that were used to train models and make predictions.\nPlease specify compute time for training models and querying separately for empirical prediction methods.\nProvide a detailed description of the hardware used to run the simulations.', null=True)),
                ('software', models.TextField(blank=True, help_text='List all major software packages used and their versions.\nCreate a new line for each software.', null=True)),
                ('category', models.CharField(blank=True, choices=[('Physical (MM)', 'Physical (MM)'), ('Physical (QM)', 'Physical (QM)'), ('Empirical', 'Empirical'), ('Mixed', 'Mixed')], help_text='State which method category your prediction method is better described as:\n`Physical (MM)`, `Physical (QM)`, `Empirical`, or `Mixed`.\nPick only one category label.', max_length=255, null=True)),
                ('method', models.TextField(blank=True, help_text='Methodology and computational details.\nLevel of details should be roughly equivalent to that used in a publication.\nPlease include the values of key parameters with units.\nPlease explain how statistical uncertainties were estimated.\n\nIf you have evaluated additional microstates, please report their SMILES strings and populations of all the microstates in this section.\nIf you used a microstate other than the challenge provided microstate (`SMXX_micro000`), please list your chosen `Molecule ID` (in the form of `SMXX_extra001`) along with the SMILES string in your methods description.\n\nUse as many lines of text as you need.', null=True)),
                ('ranked', models.BooleanField(default=True, help_text='All submissions must either be ranked or non-ranked.\nOnly one ranked submission per participant is allowed.\nMultiple ranked submissions from the same participant will not be judged.\nNon-ranked submissions are accepted so we can verify that they were made before the deadline.')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.challenge')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.container')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': ('created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TextValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ValueType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_input_flag', models.BooleanField(choices=[(True, 'Input'), (False, 'Output')])),
                ('key', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.challenge')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'unique_together': {('challenge', 'is_input_flag', 'key')},
            },
        ),
        migrations.CreateModel(
            name='SubmissionRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('digest', models.CharField(max_length=255)),
                ('is_public', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('FAILURE', 'Failure'), ('SUCCESS', 'Success'), ('PENDING', 'Pending')], max_length=25)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.submission')),
            ],
            options={
                'get_latest_by': ('created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('FAILURE', 'Failure'), ('SUCCESS', 'Success'), ('PENDING', 'Pending')], default='PENDING', max_length=25)),
                ('log_stdout', models.TextField(blank=True)),
                ('log_stderr', models.TextField(blank=True)),
                ('input_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.inputelement')),
                ('submission_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.submissionrun')),
            ],
            options={
                'unique_together': {('submission_run', 'input_element')},
            },
        ),
        migrations.CreateModel(
            name='ScoreMaker',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenge', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='core.challenge')),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.container')),
            ],
            options={
                'get_latest_by': ('created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField()),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.challenge')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('evaluation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.evaluation')),
                ('value_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.valuetype')),
            ],
            options={
                'unique_together': {('evaluation', 'value_type')},
            },
        ),
        migrations.CreateModel(
            name='InputValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('input_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.inputelement')),
                ('value_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.valuetype')),
            ],
            options={
                'unique_together': {('input_element', 'value_type')},
            },
        ),
        migrations.CreateModel(
            name='AnswerKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField()),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.challenge')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('input_element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.inputelement')),
                ('value_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.valuetype')),
            ],
            options={
                'unique_together': {('input_element', 'value_type')},
            },
        ),
    ]

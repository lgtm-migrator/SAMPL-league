# Generated by Django 4.1 on 2022-08-24 15:46

import core.models.batch_related
import core.models.run_related
import core.models.user_managed
import core.models.values
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [
        ("core", "0001_initial"),
        ("core", "0002_score_scoretype"),
        ("core", "0003_auto_20210604_1953"),
        ("core", "0004_auto_20210612_0416"),
        ("core", "0005_filevalue"),
        ("core", "0006_auto_20210629_1951"),
        ("core", "0007_auto_20210629_2017"),
        ("core", "0008_auto_20210806_1920"),
        ("core", "0009_auto_20210831_1929"),
        ("core", "0010_auto_20210907_2037"),
        ("core", "0011_submissionarg"),
        ("core", "0012_auto_20210915_0202"),
        ("core", "0013_auto_20210927_1449"),
        ("core", "0014_submission_notes"),
        ("core", "0015_alter_submission_draft_mode"),
        ("core", "0016_auto_20211109_2214"),
        ("core", "0017_auto_20211125_2146"),
        ("core", "0018_container_container_type"),
        ("core", "0019_alter_evaluation_status_alter_submissionrun_status_and_more"),
        ("core", "0020_alter_evaluationscore_unique_together_and_more"),
        ("core", "0021_alter_valuetype_batch_method"),
    ]

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Challenge",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("start_at", models.DateTimeField()),
                ("end_at", models.DateTimeField()),
                ("repo_url", models.URLField()),
                (
                    "max_batch_size",
                    models.PositiveIntegerField(
                        default=0, help_text="0 to disable batching"
                    ),
                ),
            ],
            options={
                "get_latest_by": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Container",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("registry", models.CharField(max_length=255)),
                ("label", models.CharField(max_length=255)),
                ("tag", models.CharField(blank=True, max_length=255, null=True)),
                ("digest", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.challenge"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "container_type",
                    models.CharField(
                        choices=[
                            ("docker", "Docker"),
                            ("singularity_local", "Singularity Local"),
                        ],
                        help_text="State the type of container image you are submitting `Docker` or `Singularity`.",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
            options={
                "get_latest_by": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InputElement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("is_public", models.BooleanField(default=False)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.challenge"
                    ),
                ),
                (
                    "is_parent",
                    models.BooleanField(
                        default=False,
                        help_text="Parent elements won't be evaluated. They are used to group common values",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Inherit common values from parent element, eg. protein PDB file",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputelement",
                    ),
                ),
            ],
            options={
                "unique_together": {("challenge", "name")},
            },
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "draft_mode",
                    models.BooleanField(
                        default=False,
                        help_text="Use draft mode if you would like to test your container/submission before formal submission. In draft mode, fields below may be left incomplete. Once you are happy with your submission, you must uncheck draft mode before finalizing your submission.",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Please provide an informal but informative name of the method used.\nThe name must not exceed 40 characters.",
                        max_length=40,
                    ),
                ),
                ("url", models.URLField(blank=True, null=True)),
                (
                    "compute_time",
                    models.TextField(
                        blank=True,
                        help_text="Please provide the average compute time across all of the molecules.\nFor physical methods, report the GPU and/or CPU compute time in hours.\nFor empirical methods, report the query time in hours.\nCreate a new line for each processor type.",
                        null=True,
                    ),
                ),
                (
                    "computing_and_hardware",
                    models.TextField(
                        blank=True,
                        help_text="Please provide details of the computing resources that were used to train models and make predictions.\nPlease specify compute time for training models and querying separately for empirical prediction methods.\nProvide a detailed description of the hardware used to run the simulations.",
                        null=True,
                    ),
                ),
                (
                    "software",
                    models.TextField(
                        blank=True,
                        help_text="List all major software packages used and their versions.\nCreate a new line for each software.",
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Physical (MM)", "Physical (MM)"),
                            ("Physical (QM)", "Physical (QM)"),
                            ("Empirical", "Empirical"),
                            ("Mixed", "Mixed"),
                        ],
                        help_text="State which method category your prediction method is better described as:\n`Physical (MM)`, `Physical (QM)`, `Empirical`, or `Mixed`.\nPick only one category label.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "method",
                    models.TextField(
                        blank=True,
                        help_text="Methodology and computational details.\nLevel of details should be roughly equivalent to that used in a publication.\nPlease include the values of key parameters with units.\nPlease explain how statistical uncertainties were estimated.\n\nIf you have evaluated additional microstates, please report their SMILES strings and populations of all the microstates in this section.\nIf you used a microstate other than the challenge provided microstate (`SMXX_micro000`), please list your chosen `Molecule ID` (in the form of `SMXX_extra001`) along with the SMILES string in your methods description.\n\nUse as many lines of text as you need.",
                        null=True,
                    ),
                ),
                (
                    "ranked",
                    models.BooleanField(
                        default=True,
                        help_text="All submissions must either be ranked or non-ranked.\nOnly one ranked submission per participant is allowed.\nMultiple ranked submissions from the same participant will not be judged.\nNon-ranked submissions are accepted so we can verify that they were made before the deadline.",
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.challenge"
                    ),
                ),
                (
                    "container",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.container"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Submission Annotations and Notes-to-self.\nPlease place any extra notes or annotations about your submission or submission run here. This section is only intended for notes-to-self, and will be disregarded by challenge administrators.\nUnlike other sections, you may modify this section after the challenge has concluded.\n",
                        null=True,
                    ),
                ),
            ],
            options={
                "get_latest_by": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ValueType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_input_flag",
                    models.BooleanField(choices=[(True, "Input"), (False, "Output")]),
                ),
                ("key", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.challenge"
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "batch_method",
                    models.CharField(
                        blank=True,
                        choices=[("", "None"), ("csv", "CSV"), ("sdf", "MOL or SDF")],
                        default="csv",
                        max_length=10,
                    ),
                ),
                (
                    "on_parent_flag",
                    models.BooleanField(
                        choices=[(True, "On parent"), (False, "On child")],
                        default=False,
                        help_text="For input elements, should this value be set on the parent or on the child? e.g. protein PDB structure should only be set on the parent; ligand SMILES should only be set on the child",
                    ),
                ),
            ],
            options={
                "unique_together": {("challenge", "is_input_flag", "key")},
            },
        ),
        migrations.CreateModel(
            name="SubmissionRun",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("digest", models.CharField(max_length=255)),
                ("is_public", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("FAILURE", "Failure"),
                            ("SUCCESS", "Success"),
                            ("PENDING", "Pending"),
                            ("PENDING_REMOTE", "Pending Remote"),
                            ("RUNNING", "Running"),
                            ("CANCELLED", "Cancelled"),
                            ("CANCEL_PENDING", "Cancel Pending"),
                        ],
                        max_length=25,
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.submission",
                    ),
                ),
                ("log_stderr", models.TextField(blank=True)),
                ("log_stdout", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Evaluation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("FAILURE", "Failure"),
                            ("SUCCESS", "Success"),
                            ("PENDING", "Pending"),
                            ("PENDING_REMOTE", "Pending Remote"),
                            ("RUNNING", "Running"),
                            ("CANCELLED", "Cancelled"),
                            ("CANCEL_PENDING", "Cancel Pending"),
                        ],
                        default="PENDING",
                        max_length=25,
                    ),
                ),
                ("log_stdout", models.TextField(blank=True)),
                ("log_stderr", models.TextField(blank=True)),
                (
                    "input_element",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputelement",
                    ),
                ),
                (
                    "submission_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.submissionrun",
                    ),
                ),
            ],
            options={
                "unique_together": {("submission_run", "input_element")},
            },
        ),
        migrations.CreateModel(
            name="ScoreMaker",
            fields=[
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "challenge",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="core.challenge",
                    ),
                ),
                (
                    "container",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.container"
                    ),
                ),
            ],
            options={
                "get_latest_by": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Prediction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "object_id",
                    models.PositiveIntegerField(
                        help_text="The ID of the object in the table for that type of value (Float Value, Text Value, File Value)"
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.challenge"
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "value_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.valuetype"
                    ),
                ),
                (
                    "input_element",
                    models.ForeignKey(

                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputelement",
                    ),
                ),
                (
                    "submission_run",
                    models.ForeignKey(

                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="predictions",
                        to="core.submissionrun",
                    ),
                ),
            ],
            options={
                "unique_together": {("submission_run", "input_element", "value_type")},
            },
        ),
        migrations.CreateModel(
            name="InputValue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "object_id",
                    models.PositiveIntegerField(
                        help_text="The ID of the object in the table for that type of value (Float Value, Text Value, File Value)"
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "input_element",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputelement",
                    ),
                ),
                (
                    "value_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.valuetype"
                    ),
                ),
            ],
            options={
                "unique_together": {("input_element", "value_type")},
            },
        ),
        migrations.CreateModel(
            name="AnswerKey",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "object_id",
                    models.PositiveIntegerField(
                        help_text="The ID of the object in the table for that type of value (Float Value, Text Value, File Value)"
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.challenge"
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "input_element",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputelement",
                    ),
                ),
                (
                    "value_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.valuetype"
                    ),
                ),
            ],
            options={
                "unique_together": {("input_element", "value_type")},
            },
        ),
        migrations.CreateModel(
            name="ScoreType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("key", models.CharField(max_length=255)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.challenge"
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("evaluation", "Evaluation"),
                            ("submission_run", "Submission Run"),
                        ],
                        default="evaluation",
                        max_length=255,
                    ),
                ),
            ],
            options={
                "unique_together": {("challenge", "key", "level")},
            },
        ),
        migrations.CreateModel(
            name="EvaluationScore",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("value", models.FloatField()),
                (
                    "score_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.scoretype"
                    ),
                ),
                (
                    "input_element",
                    models.ForeignKey(

                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputelement",
                    ),
                ),
                (
                    "submission_run",
                    models.ForeignKey(

                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.submissionrun",
                    ),
                ),
            ],
            options={
                "unique_together": {("submission_run", "input_element", "score_type")},
            },
        ),
        migrations.CreateModel(
            name="SubmissionRunScore",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("value", models.FloatField()),
                (
                    "score_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.scoretype"
                    ),
                ),
                (
                    "submission_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.submissionrun",
                    ),
                ),
            ],
            options={
                "unique_together": {("submission_run", "score_type")},
            },
        ),
        migrations.CreateModel(
            name="ContainerArg",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("key", models.SlugField(db_index=False)),
                ("string_value", models.TextField(blank=True, null=True)),
                (
                    "file_value",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=core.models.user_managed._container_file_location,
                    ),
                ),
                (
                    "container",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="args",
                        to="core.container",
                    ),
                ),
            ],
            options={
                "unique_together": {("container", "key")},
            },
        ),
        migrations.CreateModel(
            name="SubmissionRunPair",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "private_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_private_run",
                        to="core.submissionrun",
                    ),
                ),
                (
                    "public_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_public_run",
                        to="core.submissionrun",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.submission",
                    ),
                ),
            ],
            options={
                "unique_together": {("public_run", "private_run")},
            },
        ),
        migrations.CreateModel(
            name="InputBatchGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "max_batch_size",
                    models.PositiveIntegerField(
                        help_text="Value of setting when batch group was created"
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.challenge"
                    ),
                ),
            ],
            options={
                "get_latest_by": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InputBatch",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_public", models.BooleanField(default=False)),
                (
                    "batch_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputbatchgroup",
                    ),
                ),
                (
                    "parent_input_element",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputelement",
                    ),
                ),
            ],
            options={
                "get_latest_by": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BatchFile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "data",
                    models.FileField(
                        upload_to=core.models.batch_related.batch_upload_location
                    ),
                ),
                (
                    "batch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputbatch",
                    ),
                ),
                (
                    "value_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.valuetype"
                    ),
                ),
            ],
            options={
                "get_latest_by": ("created_at",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BatchEvaluation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("log_stdout", models.TextField(blank=True)),
                ("log_stderr", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("FAILURE", "Failure"),
                            ("SUCCESS", "Success"),
                            ("PENDING", "Pending"),
                            ("PENDING_REMOTE", "Pending Remote"),
                            ("RUNNING", "Running"),
                            ("CANCELLED", "Cancelled"),
                            ("CANCEL_PENDING", "Cancel Pending"),
                        ],
                        default="PENDING",
                        max_length=25,
                    ),
                ),
                (
                    "input_batch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputbatch",
                    ),
                ),
                (
                    "submission_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.submissionrun",
                    ),
                ),
            ],
            options={
                "unique_together": {("submission_run", "input_batch")},
            },
            bases=(models.Model, core.models.run_related.StatusMixin),
        ),
        migrations.CreateModel(
            name="FileValue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.FileField(upload_to=core.models.values._upload_location),
                ),
                (
                    "challenge",
                    models.ForeignKey(

                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.challenge",
                    ),
                ),
                (
                    "evaluation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.evaluation",
                    ),
                ),
                (
                    "input_element",
                    models.ForeignKey(

                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputelement",
                    ),
                ),
                (
                    "batch_evaluation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.batchevaluation",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FloatValue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.FloatField()),
                (
                    "challenge",
                    models.ForeignKey(

                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.challenge",
                    ),
                ),
                (
                    "evaluation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.evaluation",
                    ),
                ),
                (
                    "input_element",
                    models.ForeignKey(

                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputelement",
                    ),
                ),
                (
                    "batch_evaluation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.batchevaluation",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TextValue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.TextField(blank=True)),
                (
                    "challenge",
                    models.ForeignKey(

                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.challenge",
                    ),
                ),
                (
                    "evaluation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.evaluation",
                    ),
                ),
                (
                    "input_element",
                    models.ForeignKey(

                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputelement",
                    ),
                ),
                (
                    "batch_evaluation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.batchevaluation",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InputBatchMembership",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "batch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputbatch",
                    ),
                ),
                (
                    "batch_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputbatchgroup",
                    ),
                ),
                (
                    "input_element",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.inputelement",
                    ),
                ),
            ],
            options={
                "unique_together": {("batch_group", "input_element")},
            },
        ),
    ]
